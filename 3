QUESTION : Max Circular Subarray Sum

Given an array of integers arr[] in a circular fashion. Find the maximum subarray sum that we can get if we assume the array to be circular.

SOLUTION :

int kadane1(vector<int> &arr , int n){
        int sum = arr[0];
        int maxsum = arr[0];
        for(int i=1;i<n;i++){
            sum = max(sum+arr[i],arr[i]);
            maxsum = max(maxsum, sum);
        }
        return maxsum;
    }
    
    int kadane2(vector<int> &arr , int n){
        int sum = arr[0];
        int minsum = arr[0];
        for(int i=1;i<n;i++){
            sum = min(sum+arr[i],arr[i]);
            minsum = min(minsum, sum);
        }
        return minsum;
    }
    
    int circularSubarraySum(vector<int> &arr) {
        int n = arr.size();
        int sum = 0;
        for(int i=0;i<n;i++){
            sum += arr[i];
        }
        int maxsum = kadane1(arr,n);
        int minsum = kadane2(arr,n);
        int circularsum = sum - minsum;
        if(maxsum>0){
            return max(maxsum,circularsum);
        }
        return maxsum;
    }
